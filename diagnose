#!/usr/bin/python
import subprocess, re, sys, os

#   Server needs to be running "iperf -s -D" which puts it in daemon mode
#
#	usage:
#		diagnose bw host
#		diagnose ping host
#		diagnose cpu
#
#	returns:	0 on error
#				1 when network is ready to go

#	minimum bandwidth in Kbits per second
minBW = 150

#	Threshold for average cpu load over 1 minute span.
#		cpu < 1.00 means room for more traffic
#		cpu = 1.00 means the cpu is exactly at capacity
#		cpu > 1.00 means there's backup
#	setting threshold at 0.75 gives room for other processes
# 	and no backup.
thresh = 0.75


#	Test connection Bandwidth
#	usage: 	diagnose ping host
def ping(host):
	png = subprocess.Popen(
	    ["ping", host, "-c1", "-w1"],
	    stdout = subprocess.PIPE,
	    stderr = subprocess.PIPE
	)
	out, error = png.communicate()
	#	If there is a problem, return -1 error else return 1
	if error != "":
		print error
		return -1
	else:
		matcher = re.compile("\d+% packet loss")
		result = matcher.search(out).group()
		result = result.strip("% packet loss")
		result = int(result)
		
		if result == 100:
			return 0
		else:
			return 1


#	Test connection Bandwidth
#	usage: 	diagnose bw host
def bw(host):
	bWidth = subprocess.Popen(
	    ["iperf", "-c", host, "-fk", "-t1"],
	    stdout = subprocess.PIPE,
	    stderr = subprocess.PIPE
	)
	#   This attempts to use iperf, if it can't connect, it throws an error
	out, error = bWidth.communicate()
	if error != "":
		print error
		return -1
	else:
		matcher = re.compile("(\d+.\d+) Kbits/sec")
		result = matcher.search(out).group()
		result = result.strip(" Kbits/sec")
		result = float(result)
		#	If there is a problem, return -1 error else return 1
		if result <= minBW:
			return 0
		else:
			return 1


#	Test cpu average load.
#	usage: 	diagnose cpu
def cpu():
	out = str(os.getloadavg())
	matcher = re.compile("\d+.\d+")
	result = matcher.search(out).group()
	result = float(result)
	if result >= thresh:			
		return 0
	else:
		return 1

def main():
	if sys.argv[1] == "ping":
		print ping(sys.argv[2])
	elif sys.argv[1] == "bw":
		print bw(sys.argv[2])
	elif sys.argv[1] == "cpu":
		print cpu()


if __name__ == '__main__':
	main()
	
	
